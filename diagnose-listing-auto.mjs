import { chromium } from 'playwright';

async function diagnoseListingError() {
  console.log('üîç Starting automated diagnosis of listing page network errors...\n');
  
  const browser = await chromium.launch({
    headless: true, // Êó†Â§¥Ê®°Âºè‰ª•‰æøËá™Âä®ËøêË°å
  });

  try {
    const context = await browser.newContext({
      baseURL: 'http://localhost:8085',
      ignoreHTTPSErrors: true,
    });

    const page = await context.newPage();

    // Êî∂ÈõÜÊï∞ÊçÆÁöÑÂÆπÂô®
    const consoleErrors = [];
    const pageErrors = [];
    const networkRequests = [];
    const failedRequests = [];

    // ËÆæÁΩÆÁõëÂê¨Âô®
    page.on('console', msg => {
      if (msg.type() === 'error') {
        consoleErrors.push({
          text: msg.text(),
          location: msg.location(),
        });
      }
    });

    page.on('pageerror', error => {
      pageErrors.push(error.toString());
    });

    page.on('request', request => {
      const url = request.url();
      if (url.includes('api') || url.includes('listing')) {
        networkRequests.push({
          url: url,
          method: request.method(),
          headers: request.headers(),
          resourceType: request.resourceType(),
          timestamp: new Date().toISOString(),
        });
      }
    });

    page.on('response', response => {
      const url = response.url();
      if (url.includes('api') || url.includes('listing')) {
        const request = networkRequests.find(r => r.url === url && !r.response);
        if (request) {
          request.response = {
            status: response.status(),
            statusText: response.statusText(),
            headers: response.headers(),
            timestamp: new Date().toISOString(),
          };
          
          // Â¶ÇÊûúÊòØÈîôËØØÂìçÂ∫îÔºåÂ∞ùËØïËé∑ÂèñÂìçÂ∫î‰Ωì
          if (response.status() >= 400) {
            response.text().then(text => {
              request.response.body = text;
            }).catch(() => {
              // ÂøΩÁï•Ëé∑ÂèñÂìçÂ∫î‰ΩìÁöÑÈîôËØØ
            });
          }
        }
      }
    });

    page.on('requestfailed', request => {
      failedRequests.push({
        url: request.url(),
        method: request.method(),
        failure: request.failure(),
        resourceType: request.resourceType(),
      });
    });

    // Step 1: ËÆøÈóÆÁôªÂΩïÈ°µÈù¢
    console.log('üì± Step 1: Navigating to login page...');
    await page.goto('/login', { waitUntil: 'networkidle' });
    
    // Step 2: Â∞ùËØïÁôªÂΩï
    console.log('üîê Step 2: Attempting to login...');
    
    // Êü•ÊâæÂπ∂Â°´ÂÜôÁôªÂΩïË°®Âçï
    try {
      // Â∞ùËØï‰∏çÂêåÁöÑÈÄâÊã©Âô®
      const emailSelectors = [
        'input[type="email"]',
        'input[name="email"]',
        'input[placeholder*="email" i]',
        'input[placeholder*="Email" i]',
        '#email',
        'input[id*="email" i]'
      ];
      
      const passwordSelectors = [
        'input[type="password"]',
        'input[name="password"]',
        'input[placeholder*="password" i]',
        'input[placeholder*="Password" i]',
        '#password',
        'input[id*="password" i]'
      ];
      
      let emailFilled = false;
      for (const selector of emailSelectors) {
        try {
          await page.fill(selector, 'test@example.com', { timeout: 1000 });
          emailFilled = true;
          console.log(`  ‚úì Email filled using selector: ${selector}`);
          break;
        } catch (e) {
          // ÁªßÁª≠Â∞ùËØï‰∏ã‰∏Ä‰∏™ÈÄâÊã©Âô®
        }
      }
      
      let passwordFilled = false;
      for (const selector of passwordSelectors) {
        try {
          await page.fill(selector, 'password123', { timeout: 1000 });
          passwordFilled = true;
          console.log(`  ‚úì Password filled using selector: ${selector}`);
          break;
        } catch (e) {
          // ÁªßÁª≠Â∞ùËØï‰∏ã‰∏Ä‰∏™ÈÄâÊã©Âô®
        }
      }
      
      if (!emailFilled || !passwordFilled) {
        console.log('  ‚ö†Ô∏è  Could not fill login form, trying direct navigation to listings...');
      } else {
        // Â∞ùËØïÁÇπÂáªÁôªÂΩïÊåâÈíÆ
        const loginButtonSelectors = [
          'button[type="submit"]',
          'button:has-text("Login")',
          'button:has-text("Sign in")',
          'button:has-text("Sign In")',
          'button:has-text("Log in")',
          'button:has-text("Log In")',
          'input[type="submit"]'
        ];
        
        let loginClicked = false;
        for (const selector of loginButtonSelectors) {
          try {
            await page.click(selector, { timeout: 1000 });
            loginClicked = true;
            console.log(`  ‚úì Login button clicked using selector: ${selector}`);
            break;
          } catch (e) {
            // ÁªßÁª≠Â∞ùËØï‰∏ã‰∏Ä‰∏™ÈÄâÊã©Âô®
          }
        }
        
        if (loginClicked) {
          await page.waitForTimeout(2000);
        }
      }
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Error during login:', error.message);
    }
    
    // Step 3: ÂØºËà™Âà∞listingsÈ°µÈù¢
    console.log('\nüè† Step 3: Navigating to listings page...');
    
    // Ê∏ÖÈô§‰πãÂâçÁöÑËÆ∞ÂΩï
    networkRequests.length = 0;
    consoleErrors.length = 0;
    
    // Áõ¥Êé•ÂØºËà™Âà∞listingsÈ°µÈù¢
    try {
      await page.goto('/listings', { waitUntil: 'networkidle', timeout: 30000 });
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Error navigating to listings:', error.message);
    }
    
    // Á≠âÂæÖÈ¢ùÂ§ñÁöÑÁΩëÁªúËØ∑Ê±Ç
    await page.waitForTimeout(3000);
    
    // ÁîüÊàêÊä•Âëä
    console.log('\n' + '='.repeat(50));
    console.log('üìä DIAGNOSIS REPORT');
    console.log('='.repeat(50) + '\n');
    
    // 1. ÊéßÂà∂Âè∞ÈîôËØØ
    console.log('üî¥ CONSOLE ERRORS:');
    if (consoleErrors.length === 0) {
      console.log('  ‚úì No console errors detected');
    } else {
      consoleErrors.forEach((error, index) => {
        console.log(`\n  Error ${index + 1}:`);
        console.log(`    Message: ${error.text}`);
        if (error.location.url) {
          console.log(`    Location: ${error.location.url}:${error.location.lineNumber}`);
        }
      });
    }
    
    // 2. È°µÈù¢ÈîôËØØ
    console.log('\nüî¥ PAGE ERRORS:');
    if (pageErrors.length === 0) {
      console.log('  ‚úì No page errors detected');
    } else {
      pageErrors.forEach((error, index) => {
        console.log(`\n  Error ${index + 1}: ${error}`);
      });
    }
    
    // 3. Â§±Ë¥•ÁöÑËØ∑Ê±Ç
    console.log('\nüî¥ FAILED REQUESTS:');
    if (failedRequests.length === 0) {
      console.log('  ‚úì No failed requests');
    } else {
      failedRequests.forEach((request, index) => {
        console.log(`\n  Failed Request ${index + 1}:`);
        console.log(`    URL: ${request.url}`);
        console.log(`    Method: ${request.method}`);
        console.log(`    Failure: ${request.failure()?.errorText || 'Unknown'}`);
      });
    }
    
    // 4. CORSÂàÜÊûê
    console.log('\nüîç CORS ANALYSIS:');
    
    // OPTIONSËØ∑Ê±Ç
    const optionsRequests = networkRequests.filter(r => r.method === 'OPTIONS');
    console.log(`\n  OPTIONS Preflight Requests: ${optionsRequests.length}`);
    
    optionsRequests.forEach((request, index) => {
      console.log(`\n  OPTIONS Request ${index + 1}:`);
      console.log(`    URL: ${request.url}`);
      if (request.response) {
        console.log(`    Status: ${request.response.status} ${request.response.statusText}`);
        const headers = request.response.headers;
        console.log(`    CORS Response Headers:`);
        console.log(`      Access-Control-Allow-Origin: ${headers['access-control-allow-origin'] || '‚ùå NOT SET'}`);
        console.log(`      Access-Control-Allow-Methods: ${headers['access-control-allow-methods'] || '‚ùå NOT SET'}`);
        console.log(`      Access-Control-Allow-Headers: ${headers['access-control-allow-headers'] || '‚ùå NOT SET'}`);
        console.log(`      Access-Control-Allow-Credentials: ${headers['access-control-allow-credentials'] || '‚ùå NOT SET'}`);
      } else {
        console.log('    ‚ùå No response received');
      }
    });
    
    // 5. APIËØ∑Ê±ÇËØ¶ÊÉÖ
    console.log('\nüì° API REQUESTS DETAILS:');
    const apiRequests = networkRequests.filter(r => r.url.includes('api') && r.method !== 'OPTIONS');
    
    if (apiRequests.length === 0) {
      console.log('  ‚ö†Ô∏è  No API requests detected');
    } else {
      apiRequests.forEach((request, index) => {
        console.log(`\n  API Request ${index + 1}:`);
        console.log(`    URL: ${request.url}`);
        console.log(`    Method: ${request.method}`);
        console.log(`    Request Headers (CORS-related):`);
        const reqHeaders = request.headers;
        console.log(`      Origin: ${reqHeaders['origin'] || 'Not set'}`);
        console.log(`      Referer: ${reqHeaders['referer'] || 'Not set'}`);
        
        if (request.response) {
          console.log(`    Response Status: ${request.response.status} ${request.response.statusText}`);
          const respHeaders = request.response.headers;
          console.log(`    Response CORS Headers:`);
          console.log(`      Access-Control-Allow-Origin: ${respHeaders['access-control-allow-origin'] || '‚ùå NOT SET'}`);
          console.log(`      Access-Control-Allow-Credentials: ${respHeaders['access-control-allow-credentials'] || '‚ùå NOT SET'}`);
          
          if (request.response.status >= 400 && request.response.body) {
            console.log(`    Error Response Body:`);
            console.log(`      ${request.response.body.substring(0, 500)}...`);
          }
        } else {
          console.log('    ‚ùå No response received');
        }
      });
    }
    
    // 6. ÊÄªÁªì
    console.log('\n' + '='.repeat(50));
    console.log('üìã SUMMARY:');
    console.log('='.repeat(50));
    console.log(`  Current Page URL: ${page.url()}`);
    console.log(`  Total Console Errors: ${consoleErrors.length}`);
    console.log(`  Total Failed Requests: ${failedRequests.length}`);
    console.log(`  Total API Requests: ${apiRequests.length}`);
    console.log(`  Total OPTIONS Requests: ${optionsRequests.length}`);
    
    // ËØÜÂà´CORSÈóÆÈ¢ò
    const corsIssues = [];
    apiRequests.forEach(req => {
      if (req.response) {
        const headers = req.response.headers;
        if (!headers['access-control-allow-origin']) {
          corsIssues.push(`Missing Access-Control-Allow-Origin header for ${req.url}`);
        }
        if (req.response.status === 0) {
          corsIssues.push(`CORS blocked request to ${req.url}`);
        }
      }
    });
    
    if (corsIssues.length > 0) {
      console.log('\n‚ö†Ô∏è  DETECTED CORS ISSUES:');
      corsIssues.forEach(issue => console.log(`  - ${issue}`));
    }
    
    // ‰øùÂ≠òÊà™Âõæ
    await page.screenshot({ path: 'listing-diagnosis.png', fullPage: true });
    console.log('\nüì∏ Screenshot saved as listing-diagnosis.png');
    
  } catch (error) {
    console.error('\n‚ùå Fatal error during diagnosis:', error);
  } finally {
    await browser.close();
    console.log('\n‚úÖ Diagnosis complete.');
  }
}

// ËøêË°åËØäÊñ≠
diagnoseListingError().catch(console.error);